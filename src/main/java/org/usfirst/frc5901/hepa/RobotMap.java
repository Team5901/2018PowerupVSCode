// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5901.hepa;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX drivetrainLeftfront;
    public static WPI_TalonSRX drivetrainLeftrear;
    public static WPI_TalonSRX drivetrainRightfront;
    public static WPI_TalonSRX drivetrainRightrear;
    public static RobotDrive drivetrainRobotDrive41;
    public static WPI_TalonSRX elevatorIvory7;
    public static DigitalInput elevatorUppyBoi6;
    public static DigitalInput elevatorlowyBoi7;
    public static WPI_TalonSRX elevatorEbony1;
    public static SpeedController cubeManipulatorLeftSpinner;
    public static SpeedController cubeManipulatorRightSpinner;
    public static SpeedController cubeManipulatorDroplet;
    public static WPI_TalonSRX cubeManipulatorPeep;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //Gyro
    public static Encoder leftEncoder;
    public static ADXRS450_Gyro drivetrainGodRicardoGyro;
    static double diameter = 6.0; // inches
    static double distancePerRev = diameter * Math.PI;    
    static int ticksPerRev = 2048; // what you set them to , before was 2048
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftfront = new WPI_TalonSRX(5);
        
        
        drivetrainLeftrear = new WPI_TalonSRX(3);
        
        
        drivetrainRightfront = new WPI_TalonSRX(6);
        
        
        drivetrainRightrear = new WPI_TalonSRX(8);
        
        
        drivetrainRobotDrive41 = new RobotDrive(drivetrainLeftfront, drivetrainLeftrear,
              drivetrainRightfront, drivetrainRightrear);
        
        drivetrainRobotDrive41.setSafetyEnabled(false);
        drivetrainRobotDrive41.setExpiration(0.1);
        drivetrainRobotDrive41.setSensitivity(0.5);
        drivetrainRobotDrive41.setMaxOutput(1.0);
        drivetrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivetrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        elevatorIvory7 = new WPI_TalonSRX(7);
        
        
        elevatorUppyBoi6 = new DigitalInput(6);
        LiveWindow.addSensor("Elevator", "UppyBoi6", elevatorUppyBoi6);
        
        elevatorlowyBoi7 = new DigitalInput(7);
        LiveWindow.addSensor("Elevator", "lowyBoi7", elevatorlowyBoi7);
        
        elevatorEbony1 = new WPI_TalonSRX(1);
        
        
        cubeManipulatorLeftSpinner = new Spark(2);
        LiveWindow.addActuator("CubeManipulator", "LeftSpinner", (Spark) cubeManipulatorLeftSpinner);
        cubeManipulatorLeftSpinner.setInverted(false);
        cubeManipulatorRightSpinner = new Spark(1);
        LiveWindow.addActuator("CubeManipulator", "RightSpinner", (Spark) cubeManipulatorRightSpinner);
        cubeManipulatorRightSpinner.setInverted(false);
        cubeManipulatorDroplet = new VictorSP(3);
        LiveWindow.addActuator("CubeManipulator", "Droplet", (VictorSP) cubeManipulatorDroplet);
        cubeManipulatorDroplet.setInverted(false);
        cubeManipulatorPeep = new WPI_TalonSRX(9);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        //%%%%%%%%%%%%% GYRO %%%%%%%%%%%%%%
        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        drivetrainGodRicardoGyro = new ADXRS450_Gyro();
        LiveWindow.addSensor("Drivetrain", "GodKevinGyro", drivetrainGodRicardoGyro);
        
        leftEncoder = new Encoder(0, 1, false, Encoder.EncodingType.k1X);        
        leftEncoder.setDistancePerPulse(distancePerRev / ticksPerRev);      	
      	leftEncoder.setMaxPeriod(.1);
      	leftEncoder.setMinRate(10);	
      	leftEncoder.setReverseDirection(true);
      	leftEncoder.setSamplesToAverage(7);
      	LiveWindow.addSensor("Drivetrain", "Encoder", leftEncoder);
    
      	//elevatorEbony1.set(com.ctre.phoenix.motorcontrol.Position);
      	//elevatorEbony1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
      	//elevatorEbony1.setPID(0.5, 0.001,0.0);
      	//elevatorEbony1.enableControl();
      	//elevatorIvory7.changeControlMode(ControlMode.Follower)
      	//elevatorIvory7.set(elevatorEbony1.getDeviceID());
      	
      	//Lavon this is the ramping limits so the robot wont go full speed in the first 2 seconds. For elevator.
      	elevatorEbony1.configOpenloopRamp(1.5,0);
      	elevatorIvory7.configOpenloopRamp(1.5,0);
      	elevatorEbony1.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0,0);
      	elevatorIvory7.set(com.ctre.phoenix.motorcontrol.ControlMode.Follower, 1);
      	
      	//Arm Encoder
      	cubeManipulatorPeep.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute, 0,0);
      	
      	//Set current position to 0
      	int sensorPos=0;
      	elevatorEbony1.setSelectedSensorPosition(sensorPos, 0,10);
      	
      	//Set peak output
      	elevatorEbony1.configNominalOutputForward(0, 0);
      	elevatorEbony1.configNominalOutputReverse(0, 0);
      	elevatorIvory7.configNominalOutputForward(0, 0);
      	elevatorIvory7.configNominalOutputReverse(0, 0);
      	elevatorEbony1.configPeakOutputForward(.5,0);    
      	elevatorEbony1.configPeakOutputReverse(-.5,0);
      	elevatorIvory7.configPeakOutputForward(.5,0);    
      	elevatorIvory7.configPeakOutputReverse(-.5,0);
          	
      	
      	
      	//Limit floor and ceiling
      	elevatorEbony1.configForwardSoftLimitThreshold(36000,0);
      	elevatorEbony1.configReverseSoftLimitThreshold(0,0);
      	elevatorEbony1.configForwardSoftLimitEnable(true, 0);
      	elevatorEbony1.configReverseSoftLimitEnable(true, 0);

      	//Ramping for Drivetrain
      	drivetrainLeftfront.configOpenloopRamp(0.1,0);
      	drivetrainLeftrear.configOpenloopRamp(0.1,0);
      	drivetrainRightfront.configOpenloopRamp(0.1,0);
      	drivetrainRightrear.configOpenloopRamp(0.1,0);
      	
    }
    
    
    
}
