// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5901.hepa;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5901.hepa.RobotMap;
import org.usfirst.frc5901.hepa.commands.*;
import org.usfirst.frc5901.hepa.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {



    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    SendableChooser<String> positionChooser = new SendableChooser<>();
    

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static Elevator elevator;
    public static CubeManipulator cubeManipulator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        SmartDashboard.putData(drivetrain);
        elevator = new Elevator();
        cubeManipulator = new CubeManipulator();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        //CameraServer.getInstance().startAutomaticCapture();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        positionChooser.addDefault("Left", "left");
        positionChooser.addObject("Middle", "middle");
        positionChooser.addObject("Right", "right");
        positionChooser.addObject("Cross Line", "cross");

        SmartDashboard.putData("Auto Mode", positionChooser);
        
        //RobotMap.leftEncoder.reset();
       NetworkTableInstance.getDefault().getTable("limelight").getEntry("ledMode").setNumber(0);
       UsbCamera camera1 = CameraServer.getInstance().startAutomaticCapture(0);
       camera1.setResolution(320, 240);
       camera1.setFPS(10);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
    	System.out.println(positionChooser.getSelected());
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	RobotMap.drivetrainGodRicardoGyro.reset();
    	RobotMap.leftEncoder.reset();
    	
    	String gameData;
		gameData = DriverStation.getInstance().getGameSpecificMessage();
		while (gameData ==null || gameData.length() < 2) {
			gameData = DriverStation.getInstance().getGameSpecificMessage();
		}
		//############################################
		//##### If we are starting in position 1 #####
		//############################################
		System.out.println(gameData); 
		if(positionChooser.getSelected().equals("left")) {
			System.out.println("Starting Left");
			//If the scale is on left
			if(gameData.charAt(1) == 'L')								
			{
				//Do scale
				System.out.println("Position 1 Left Scale");
				autonomousCommand = new AutonomousPosition1LeftScale();
	
			}		
			//If the switch is on the left
			else if(gameData.charAt(0) == 'L')
			{
				
				//Do switch			
				System.out.println("Position 1 Left Switch");
				autonomousCommand = new AutonomousPosition1LeftSwitch();
				
			} else {
				//Cross the line
				System.out.println("Cross Line");
				autonomousCommand = new AutonomousCrossLine();
			}
		}
		//############################################
		//##### If we are starting in position 2 #####
		//############################################
		
		else if (positionChooser.getSelected().equals("middle")) {
			System.out.println("Starting Middle");
			
			//If the switch is on the left
			if(gameData.charAt(0) == 'L')								
			{
				//Do left switch
				System.out.println("Position 2 Left Switch");
				autonomousCommand = new AutonomousPosition2LeftSwitch();
			}		
			else {
				//Do right switch
				System.out.println("Position 2 Right Switch");
				autonomousCommand = new AutonomousPositon2RightSwitch();
			}
		}
		
		//############################################
		//##### If we are starting in position 3 #####
		//############################################
		
		else if (positionChooser.getSelected().equals("right")) {
			System.out.println("Starting Right");
			//If the scale is on right
			if(gameData.charAt(1) == 'R')								
			{
				//Do scale
				System.out.println("Position 3 Right Scale");
				autonomousCommand = new AutonomousPosition3RightScale();
	
			}		
			//If the switch is on the right
			else if(gameData.charAt(0) == 'R')
			{				
				//Do switch		
				System.out.println("Position 3 Right Switch");
				autonomousCommand = new AutonomousPosition3RightSwitch();
				
			} else {
				//Cross the line
				System.out.println("Cross Line");
				autonomousCommand = new AutonomousCrossLine();
			}
		}
		else if(positionChooser.getSelected().equals("cross")){
			System.out.println("Cross Line");
			autonomousCommand = new AutonomousCrossLine();
		}	
		else {
			System.out.println("Invalid");
			autonomousCommand = null;
		}
			
			
		
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}

