// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5901.hepa.subsystems;

//import java.awt.Robot;
import org.usfirst.frc5901.hepa.Robot;
import org.usfirst.frc5901.hepa.RobotMap;
import org.usfirst.frc5901.hepa.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX ivory7 = RobotMap.elevatorIvory7;
    private final DigitalInput uppyBoi6 = RobotMap.elevatorUppyBoi6;
    private final DigitalInput lowyBoi7 = RobotMap.elevatorlowyBoi7;
    private final WPI_TalonSRX ebony1 = RobotMap.elevatorEbony1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double elevator_upspeed = 0.8;
    double elevator_downspeed = -0.3;
    double switch_height = 6342;
    double scale_height = 14117;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ManualElevator());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
    		
        // Put code here to be run every loop

    }
    
    public void raiseElevator() {

    	if(isUpperSwitchNOTSet())
    	{
    		System.out.println("Raise Elevator");
    		System.out.println(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition());
			RobotMap.elevatorEbony1.set(0.4); //was .65
			RobotMap.elevatorIvory7.set(0.4); 
		}

    }
    
    public void lowerElevator() {
    	if(isLowerSwitchNOTSet()) {
	    	System.out.println("Lower Elevator");
	    	System.out.println(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition());
	    	RobotMap.elevatorEbony1.set(-.25);
	    	RobotMap.elevatorIvory7.set(-.25); //was 0.5
    	}
    }
    
    public void stopElevator() {
    	RobotMap.elevatorEbony1.set(0.0);
    	RobotMap.elevatorIvory7.set(0.0);
    }
    
    public boolean isUpperSwitchNOTSet(){
    	if(!RobotMap.elevatorUppyBoi6.get()) {
    		System.out.println("Upper Switch Triggered");
    	}
  		return RobotMap.elevatorUppyBoi6.get();
    }
	public boolean isLowerSwitchNOTSet() {
		if(!RobotMap.elevatorlowyBoi7.get()) {
			System.out.println("Lower Switch Triggered");
    	}
		return RobotMap.elevatorlowyBoi7.get();
	}
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	
	public void manualControl(){
				
		if(Robot.oi.connieJS1.getRawAxis(3) > 0.2 && isUpperSwitchNOTSet())
		{
			System.out.println("Manual Raise Elevator");
			raiseElevator();
		}
		else if(Robot.oi.connieJS1.getRawAxis(2) > 0.2 && isLowerSwitchNOTSet())
		{
			System.out.println("Manual Lower Elevator");
			lowerElevator();			
		}
		else
		{
			stopElevator();
		}

	}
	
	public void GoToGround() {
		if(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition() > 2500) {
			System.out.println("Go to Ground");
			RobotMap.elevatorEbony1.set(elevator_downspeed);
			RobotMap.elevatorIvory7.set(elevator_downspeed); //.5);
		}
		else if(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition() < 0 ){
			System.out.println("Raise to Ground");
			RobotMap.elevatorEbony1.set(elevator_upspeed);
			RobotMap.elevatorIvory7.set(elevator_upspeed); //.5);			
		}
		
		else			{
			System.out.println("STOP - Reached Ground");
			RobotMap.elevatorEbony1.set(0.0);
			RobotMap.elevatorIvory7.set(0.0);
			}
		}
	
	
	public void SwitchHeight() {
		if(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition() > switch_height+1000) {
			System.out.println("Down to Switch");
			RobotMap.elevatorEbony1.set(elevator_downspeed);
			RobotMap.elevatorIvory7.set(elevator_downspeed); //.5);
		}
		else if(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition() < switch_height-1000)			{
			System.out.println("raise to switch");
			RobotMap.elevatorEbony1.set(elevator_upspeed);
			RobotMap.elevatorIvory7.set(elevator_upspeed);
			}
		else
		{
			System.out.println("Stop - Switch");
			RobotMap.elevatorEbony1.set(0.1);
			RobotMap.elevatorIvory7.set(0.1);
		}   
	
	}
	public void ScaleHeight() {
		
		if(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition() > scale_height + 800) {
			System.out.println("Down to scale:");
			RobotMap.elevatorEbony1.set(elevator_downspeed);
			RobotMap.elevatorIvory7.set(elevator_downspeed); //.5);
		}
		else if(RobotMap.elevatorEbony1.getSensorCollection().getQuadraturePosition() < scale_height - 800)			{
			System.out.println("Raise to scale");
			RobotMap.elevatorEbony1.set(elevator_upspeed);
			RobotMap.elevatorIvory7.set(elevator_upspeed);
			}	
		
		else{
			System.out.println("Stop - Scale");
			RobotMap.elevatorEbony1.set(0.1);
			RobotMap.elevatorIvory7.set(0.1);
			}   
		}
	

	}
	
	



