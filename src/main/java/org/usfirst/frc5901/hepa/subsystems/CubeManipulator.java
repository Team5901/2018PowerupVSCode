// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5901.hepa.subsystems;

import org.usfirst.frc5901.hepa.Robot;
import org.usfirst.frc5901.hepa.RobotMap;
import org.usfirst.frc5901.hepa.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class CubeManipulator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftSpinner = RobotMap.cubeManipulatorLeftSpinner;
    private final SpeedController rightSpinner = RobotMap.cubeManipulatorRightSpinner;
    private final SpeedController droplet = RobotMap.cubeManipulatorDroplet;
    private final WPI_TalonSRX peep = RobotMap.cubeManipulatorPeep;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    double arm_closespeed = 0.3;
    double arm_openspeed = -0.3;
    double position_open = 4100;
    double position_close = 3500;
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DefaultCubeIntake());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }


    public void cubeintake() {
    	System.out.println("Cube In");
    	RobotMap.cubeManipulatorLeftSpinner.set(-0.8);
    	RobotMap.cubeManipulatorRightSpinner.set(-0.8);
    }
    

    public void cubeout() {
    	System.out.println("Cube Out");
    	RobotMap.cubeManipulatorLeftSpinner.set(0.6);
    	RobotMap.cubeManipulatorRightSpinner.set(0.6);
	
    }
    
    public void cubehold() {
    	System.out.println("Cube Hold");
    	RobotMap.cubeManipulatorDroplet.set(-0.2);	
    }

    public void stopcube() {
    	RobotMap.cubeManipulatorLeftSpinner.set(0.0);
    	RobotMap.cubeManipulatorRightSpinner.set(0.0);
	
    }
    public void LowerArm() {
    	System.out.println("Lower Arm");
    	RobotMap.cubeManipulatorDroplet.set(-0.5);
    }
    public void StopArm() {	
    	System.out.println("Stop Arm");
    	RobotMap.cubeManipulatorDroplet.set(0.0);    	
    }
    
    public void RaiseArm() {	
    	System.out.println("Raise Arm");
    	RobotMap.cubeManipulatorDroplet.set(0.5);    	
    }

    public void stopsqueeze() {
    	System.out.println("stopSqueeze");
    	RobotMap.cubeManipulatorPeep.set(0.0);
   
    }

    public void squeeze() {
         	
    	if(RobotMap.cubeManipulatorPeep.getSensorCollection().getQuadraturePosition() > position_open ) {
			System.out.println("openArms - too open ");
			RobotMap.cubeManipulatorPeep.set(arm_closespeed);	
			RobotMap.cubeManipulatorLeftSpinner.set(-0.8);
	    	RobotMap.cubeManipulatorRightSpinner.set(-0.8);
		}
    	else if (RobotMap.cubeManipulatorPeep.getSensorCollection().getQuadraturePosition() < position_open ) {
    		System.out.println("openArms - too close ");
			RobotMap.cubeManipulatorPeep.set(arm_openspeed);	
			RobotMap.cubeManipulatorLeftSpinner.set(-0.8);
	    	RobotMap.cubeManipulatorRightSpinner.set(-0.8);
    	}
		else {
    		System.out.println("openArms - too close ");
			RobotMap.cubeManipulatorPeep.set(0.0);	
			RobotMap.cubeManipulatorLeftSpinner.set(-0.8);
	    	RobotMap.cubeManipulatorRightSpinner.set(-0.8);
		}
    }
    public void squeezeonly() {
     	
    	if(RobotMap.cubeManipulatorPeep.getSensorCollection().getQuadraturePosition() > position_open ) {
			System.out.println("openArms - too open ");
			RobotMap.cubeManipulatorPeep.set(arm_closespeed);	
		
		}
    	else if (RobotMap.cubeManipulatorPeep.getSensorCollection().getQuadraturePosition() < position_open ) {
    		System.out.println("openArms - too close ");
			RobotMap.cubeManipulatorPeep.set(arm_openspeed);	
			
    	}
		else {
    		System.out.println("openArms - too close ");
			RobotMap.cubeManipulatorPeep.set(0.0);	
			
		}
    }

    public void openArms() {
    	if(RobotMap.cubeManipulatorPeep.getSensorCollection().getQuadraturePosition() > position_close ) {
			System.out.println("squeeze - too open ");
			RobotMap.cubeManipulatorPeep.set(arm_openspeed);
		}
    	else if (RobotMap.cubeManipulatorPeep.getSensorCollection().getQuadraturePosition() < position_close ) {
    		System.out.println("squeeze - too close ");
			RobotMap.cubeManipulatorPeep.set(arm_closespeed);
    	}
		else {
    		System.out.println("squeeze - too close ");
			RobotMap.cubeManipulatorPeep.set(0.0);			
		}
    
    }
    	
	
    // Put methods for controlling this subsystem\\
    // here. Call these from Commands.
}

